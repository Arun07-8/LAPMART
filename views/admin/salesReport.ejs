<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report - Admin Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f7fa;
            color: #333;
        }
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 20px;
            min-height: 100vh;
        }
        .header {
            background: white;
            padding: 15px 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header h1 {
            font-size: 24px;
            font-weight: 600;
            color: #2c3e50;
        }
        .user-profile {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #3498db;
        }
        .search-section {
            background: white;
            padding: 25px 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .search-section h2 {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .search-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .search-input {
            flex: 1;
            min-width: 200px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: box-shadow 0.3s;
        }
        .search-input:focus {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            outline: none;
        }
        .filter-select {
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            min-width: 150px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: box-shadow 0.3s;
        }
        .filter-select:focus {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            outline: none;
        }
        .date-range-custom {
            display: none;
            gap: 10px;
        }
        .date-range-custom input {
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            width: 150px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: box-shadow 0.3s;
        }
        .date-range-custom input:focus {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            outline: none;
        }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .btn-primary {
            background: #6c5ce7;
            color: white;
        }
        .btn-primary:hover {
            background: #5f3dc4;
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background: #5a6268;
        }
        .export-section .btn-export-pdf {
            background: #e74c3c !important;
            color: white !important;
        }
        .export-section .btn-export-pdf:hover {
            background: #c0392b !important;
        }
        .export-section .btn-export-excel {
            background: #27ae60 !important;
            color: white !important;
        }
        .export-section .btn-export-excel:hover {
            background: #219653 !important;
        }
        .sales-summary {
            background: white;
            padding: 25px 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .sales-summary h3 {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #2c3e50;
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 30px;
        }
        .summary-item {
            text-align: left;
        }
        .summary-label {
            font-size: 14px;
            color: #7f8c8d;
            margin-bottom: 8px;
        }
        .summary-value {
            font-size: 24px;
            font-weight: 700;
            color: #2c3e50;
        }
        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow-x: auto;
            min-height: 400px;
        }
        .data-table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }
        .data-table thead {
            background: #2c3e50;
            color: white;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        .data-table th, .data-table td {
            padding: 15px 12px;
            font-size: 14px;
            vertical-align: middle;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-align: center;
        }
        .data-table th {
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .data-table th:nth-child(1), .data-table td:nth-child(1) { width: 12%; max-width: 120px; }
        .data-table th:nth-child(2), .data-table td:nth-child(2) { width: 15%; max-width: 150px; }
        .data-table th:nth-child(3), .data-table td:nth-child(3) { width: 10%; max-width: 100px; }
        .data-table th:nth-child(4), .data-table td:nth-child(4) { width: 10%; max-width: 100px; }
        .data-table th:nth-child(5), .data-table td:nth-child(5) { width: 10%; max-width: 100px; }
        .data-table th:nth-child(6), .data-table td:nth-child(6) { width: 10%; max-width: 100px; }
        .data-table th:nth-child(7), .data-table td:nth-child(7) { width: 12%; max-width: 120px; }
        .data-table th:nth-child(8), .data-table td:nth-child(8) { width: 10%; max-width: 100px; }
        .data-table th:nth-child(9), .data-table td:nth-child(9) { width: 11%; max-width: 110px; }
        .data-table tbody tr {
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        .data-table tbody tr:hover {
            background-color: #f8f9fa;
        }
        .data-table .order-id {
            font-family: 'Courier New', monospace;
            font-weight: 500;
            color: #2c3e50;
        }
        .data-table .amount {
            font-weight: 600;
            color: #2c3e50;
        }
        .data-table .discount {
            color: #e74c3c;
        }
        .data-table .coupon {
            color: #f39c12;
        }
        .data-table .final-amount {
            font-weight: 700;
            color: #27ae60;
            font-size: 15px;
        }
        .payment-method {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            text-transform: lowercase;
            display: inline-block;
            min-width: 80px;
            text-align: center;
        }
        .method-razorpay {
            background: #e3f2fd;
            color: #1976d2;
        }
        .method-cashondelivery {
            background: #fff3e0;
            color: #f57c00;
        }
        .method-wallet {
            background: #e8f5e8;
            color: #388e3c;
        }
        .method-na {
            background: #f0f0f0;
            color: #666;
        }
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: capitalize;
            display: inline-block;
            min-width: 80px;
            text-align: center;
        }
        .status-pending {
            background: #e0f7fa;
            color: #006064;
        }
        .status-processing {
            background: #e1f5fe;
            color: #0288d1;
        }
        .status-shipped {
            background: #fff3cd;
            color: #856404;
        }
        .status-delivered {
            background: #d4edda;
            color: #155724;
        }
        .status-cancelled {
            background: #f8d7da;
            color: #721c24;
        }
        .status-returnrequest {
            background: #fff9c4;
            color: #f57c00;
        }
        .status-returned {
            background: #efebe9;
            color: #3c2f2f;
        }
        .status-returnrejected {
            background: #ffcdd2;
            color: #b71c1c;
        }
        .status-partiallyreturned {
            background: #ffebee;
            color: #c62828;
        }
        .status-na {
            background: #f0f0f0;
            color: #666;
        }
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            gap: 5px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            color: #333;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.2s;
        }
        .pagination button:hover {
            background: #f8f9fa;
        }
        .pagination button.active {
            background: #6c5ce7;
            color: white;
            border-color: #6c5ce7;
        }
        .pagination button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        .export-section {
            padding: 20px 30px;
            background: white;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
            flex-wrap: nowrap;
        }
        .mobile-menu-toggle {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: #2c3e50;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #6c5ce7;
        }
        .spinner {
            display: inline-block;
            border: 3px solid #6c5ce7;
            border-top: 3px solid transparent;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .search-input:disabled,
        .filter-select:disabled,
        .date-range-custom input:disabled,
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 70px 15px 20px;
            }
            .mobile-menu-toggle {
                display: block;
            }
            .search-controls {
                flex-direction: column;
                align-items: stretch;
            }
            .search-input {
                min-width: auto;
            }
            .filter-select {
                width: 100%;
            }
            .date-range-custom input {
                width: 100%;
            }
            .summary-grid {
                grid-template-columns: 1fr;
            }
            .table-container {
                overflow-x: auto;
            }
            .data-table {
                min-width: 800px;
            }
            .data-table th,
            .data-table td {
                padding: 8px 6px;
                font-size: 12px;
            }
            .export-section {
                flex-direction: row;
                flex-wrap: nowrap;
                justify-content: flex-end;
                gap: 10px;
            }
            .btn-export-pdf,
            .btn-export-excel {
                flex: 0 1 auto;
                min-width: 120px;
            }
        }
    </style>
</head>
<body>
    <%- include("../../views/partials/admin/header") %>
    <div class="dashboard-container">
        <button class="mobile-menu-toggle" onclick="toggleSidebar()">☰</button>
        <div id="sidebar-container"></div>

        <main class="main-content">
            <header class="header">
                <h1>Sales Report</h1>
                <div class="user-profile">
                    <div class="user-avatar"></div>
                    <span>Admin</span>
                </div>
            </header>

            <section class="search-section">
                <h2>Filters</h2>
                <div class="search-controls">
                    <input type="text" id="searchInput" class="search-input" placeholder="Search by Order ID...">
                    <input type="text" id="userSearchInput" class="search-input" placeholder="Search by Name">
                    <select id="paymentMethodSelect" class="filter-select">
                        <option value="">All Payment Methods</option>
                        <option value="Razorpay">Razorpay</option>
                        <option value="Cash on Delivery">Cash on Delivery</option>
                        <option value="Wallet">Wallet</option>
                    </select>
                    <select id="orderStatusSelect" class="filter-select">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Return Request">Return Request</option>
                        <option value="Returned">Returned</option>
                    </select>
                    <select id="dateRangeSelect" class="filter-select">
                        <option value="">Select Range</option>
                        <option value="today">Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="last7days">Last 7 Days</option>
                        <option value="last30days">Last 30 Days</option>
                        <option value="thismonth">This Month</option>
                        <option value="lastmonth">Last Month</option>
                        <option value="thisyear">This Year</option>
                        <option value="lastyear">Last Year</option>
                        <option value="custom">Custom Range</option>
                    </select>
                    <div class="date-range-custom" id="customDateRange">
                        <input type="text" id="startDate" placeholder="DD/MM/YYYY">
                        <input type="text" id="endDate" placeholder="DD/MM/YYYY">
                    </div>
                    <button class="btn btn-primary" onclick="filterSales()">Search</button>
                    <button class="btn btn-secondary" onclick="clearFilters()">Clear</button>
                </div>
            </section>

            <section class="sales-summary">
                <h3>Sales Summary</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="summary-label">Gross Sales</div>
                        <div class="summary-value">₹<%= summary?.grossSales || '0.00' %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Coupons Redeemed</div>
                        <div class="summary-value">₹<%= summary?.totalCoupons || '0.00' %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Discounts</div>
                        <div class="summary-value">₹<%= summary?.totalDiscount || '0.00' %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Net Sales</div>
                        <div class="summary-value">₹<%= summary?.netSales || '0.00' %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Total Orders</div>
                        <div class="summary-value"><%= summary?.totalOrders || 0 %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Total Returns</div>
                        <div class="summary-value"><%= summary?.totalReturns || 0 %></div>
                    </div>
                </div>
            </section>

            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>ORDER ID</th>
                            <th>CUSTOMER</th>
                            <th>AMOUNT</th>
                            <th>DISCOUNT</th>
                            <th>COUPON</th>
                            <th>FINAL AMOUNT</th>
                            <th>PAYMENT METHOD</th>
                            <th>DATE</th>
                            <th>STATUS</th>
                        </tr>
                    </thead>
                    <tbody id="orderTableBody">
                        <% if (orders && orders.length > 0) { %>
                            <% orders.forEach(order => { %>
                                <tr>
                                    <td class="order-id"><%= order.orderId || 'N/A' %></td>
                                    <td><%= order.shippingAddress?.name || 'N/A' %></td>
                                    <td class="amount">₹<%= (order.totalPrice || 0).toFixed(2) %></td>
                                    <td class="discount">₹<%= (order.discount || 0).toFixed(2) %></td>
                                    <td class="coupon">₹<%= (order.couponApplied ? (order.discount || 0) : 0).toFixed(2) %></td>
                                    <td class="final-amount">₹<%= (order.finalAmount || 0).toFixed(2) %></td>
                                    <td><span class="payment-method method-<%= (order.paymentMethod || '').toLowerCase().replace(/\s/g, '') || 'na' %>">
                                        <%= order.paymentMethod || 'N/A' %>
                                    </span></td>
                                    <td><%= order.createdAt ? new Date(order.createdAt).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" }) : 'N/A' %></td>
                                    <td><span class="status-badge status-<%= (order.orderedItems.some(item => item.status === 'Returned') ? 'partiallyreturned' : (order.orderedItems[0]?.status || 'Delivered').toLowerCase().replace(/\s/g, '')) %>">
                                        <%= order.orderedItems.some(item => item.status === 'Returned') ? 'Partially Returned' : (order.orderedItems[0]?.status || 'Delivered') %>
                                    </span></td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr><td colspan="9" style="text-align: center;">No orders found</td></tr>
                        <% } %>
                    </tbody>
                </table>

                <div class="pagination" id="pagination">
                    <button disabled>Page <%= currentPage || 1 %> of <%= totalPages || 1 %></button>
                    <% if (totalPages > 1) { %>
                        <button <%= currentPage === 1 ? 'disabled' : '' %> onclick="changePage(<%- currentPage - 1 %>)">←</button>
                        <% 
                            const maxButtons = 5;
                            let startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));
                            let endPage = Math.min(totalPages, startPage + maxButtons - 1);
                            if (endPage - startPage + 1 < maxButtons) {
                                startPage = Math.max(1, endPage - maxButtons + 1);
                            }
                        %>
                        <% if (startPage > 1) { %>
                            <button onclick="changePage(1)">1</button>
                            <% if (startPage > 2) { %>
                                <button disabled>...</button>
                            <% } %>
                        <% } %>
                        <% for (let i = startPage; i <= endPage; i++) { %>
                            <button <%= i === currentPage ? 'class="active" disabled' : '' %> onclick="changePage(<%- i %>)"><%= i %></button>
                        <% } %>
                        <% if (endPage < totalPages) { %>
                            <% if (endPage < totalPages - 1) { %>
                                <button disabled>...</button>
                            <% } %>
                            <button onclick="changePage(<%- totalPages %>)"><%= totalPages %></button>
                        <% } %>
                        <button <%= currentPage === totalPages ? 'disabled' : '' %> onclick="changePage(<%- currentPage + 1 %>)">→</button>
                    <% } %>
                </div>

                <div class="export-section">
                    <button class="btn btn-export-pdf" onclick="exportPDF()">Export PDF</button>
                    <button class="btn btn-export-excel" onclick="exportExcel()">Export Excel</button>
                </div>
            </div>
        </main>
    </div>

    <script>
        let currentOrders = <%- JSON.stringify(orders || []) %>;
        let currentSummary = <%- JSON.stringify(summary || { grossSales: '0.00', totalDiscount: '0.00', totalCoupons: '0.00', netSales: '0.00', totalOrders: 0, totalReturns: 0 }) %>;
        let currentPage = <%= currentPage || 1 %>;
        let totalPages = <%= totalPages || 1 %>;
        const itemsPerPage = 8;
        let isFetching = false;
        let loadingTimeout;
        const searchCache = new Map();

        document.getElementById("customDateRange").style.display = "none";

        document.addEventListener("DOMContentLoaded", function () {
            flatpickr("#startDate", {
                dateFormat: "d/m/Y",
                allowInput: true,
                onChange: function (selectedDates, dateStr) {
                    if (dateStr) {
                        currentPage = 1;
                        filterSales();
                    }
                }
            });
            flatpickr("#endDate", {
                dateFormat: "d/m/Y",
                allowInput: true,
                onChange: function (selectedDates, dateStr) {
                    if (dateStr) {
                        currentPage = 1;
                        filterSales();
                    }
                }
            });
            searchCache.clear(); // Clear cache on initial load
            filterSales(); // Trigger initial fetch
        });

        function toggleInputs(disabled) {
            document.getElementById("searchInput").disabled = disabled;
            document.getElementById("userSearchInput").disabled = disabled;
            document.getElementById("paymentMethodSelect").disabled = disabled;
            document.getElementById("orderStatusSelect").disabled = disabled;
            document.getElementById("dateRangeSelect").disabled = disabled;
            document.getElementById("startDate").disabled = disabled;
            document.getElementById("endDate").disabled = disabled;
            document.querySelectorAll(".btn").forEach(btn => btn.disabled = disabled);
        }

        document.getElementById("dateRangeSelect").addEventListener("change", function () {
            const customDateRange = document.getElementById("customDateRange");
            customDateRange.style.display = this.value === "custom" ? "flex" : "none";
            if (this.value !== "custom" && this.value !== "") {
                document.getElementById("startDate").value = "";
                document.getElementById("endDate").value = "";
                currentPage = 1;
                filterSales();
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        const inputs = [
            { id: "searchInput", element: document.getElementById("searchInput"), event: "input" },
            { id: "userSearchInput", element: document.getElementById("userSearchInput"), event: "input" },
            { id: "paymentMethodSelect", element: document.getElementById("paymentMethodSelect"), event: "change" },
            { id: "orderStatusSelect", element: document.getElementById("orderStatusSelect"), event: "change" },
            { id: "startDate", element: document.getElementById("startDate"), event: "input" },
            { id: "endDate", element: document.getElementById("endDate"), event: "input" }
        ];

        inputs.forEach(({ id, element, event }) => {
            if (!element) return;
            element.addEventListener(event, debounce(function () {
                if (element.type === "text" && element.value.trim().length > 0 && element.value.trim().length < 2 && id !== "startDate" && id !== "endDate") return;
                currentPage = 1;
                filterSales();
            }, 300));
        });

        function changePage(page) {
            if (currentPage !== page && !isFetching) {
                currentPage = page;
                filterSales();
            }
        }

        async function filterSales() {
            if (isFetching) return;
            isFetching = true;
            toggleInputs(true);

            const search = document.getElementById("searchInput").value.trim().replace(/[<>]/g, '');
            const userSearch = document.getElementById("userSearchInput").value.trim().replace(/[<>]/g, '');
            const paymentMethod = document.getElementById("paymentMethodSelect").value;
            const orderStatus = document.getElementById("orderStatusSelect").value;
            const dateRange = document.getElementById("dateRangeSelect").value;
            let startDate = document.getElementById("startDate").value.trim();
            let endDate = document.getElementById("endDate").value.trim();

            if (dateRange === "custom") {
                if (startDate && !endDate) {
                    endDate = startDate;
                } else if (endDate && !startDate) {
                    startDate = endDate;
                }
            }

            const filterParams = { search, userSearch, paymentMethod, orderStatus, dateRange, startDate, endDate, page: currentPage, limit: itemsPerPage };
            const cacheKey = JSON.stringify(filterParams);

            console.log("Filter Params:", filterParams);

            if (searchCache.has(cacheKey)) {
                const cached = searchCache.get(cacheKey);
                currentOrders = cached.orders;
                currentSummary = cached.summary;
                totalPages = cached.totalPages;
                currentPage = cached.currentPage;
                renderTable();
                renderSummary();
                renderPagination();
                isFetching = false;
                toggleInputs(false);
                console.log("Using cached data:", cached);
                return;
            }

            try {
                const tableBody = document.getElementById("orderTableBody");
                tableBody.innerHTML = '<tr><td colspan="9" class="loading"><span class="spinner"></span>Loading...</td></tr>';

                loadingTimeout = setTimeout(() => {
                    if (isFetching) {
                        showError("Request taking too long. Please check your connection or try again later.");
                        isFetching = false;
                        toggleInputs(false);
                    }
                }, 5000);

                const response = await fetch("/admin/filter-sales-report", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(filterParams)
                });

                clearTimeout(loadingTimeout);

                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

                const data = await response.json();
                if (!data.success) throw new Error(data.error || "Failed to fetch sales data");

                currentOrders = Array.isArray(data.orders) ? data.orders : [];
                currentSummary = data.summary && typeof data.summary === "object" ? {
                    grossSales: String(data.summary.grossSales || '0.00'),
                    totalDiscount: String(data.summary.totalDiscount || '0.00'),
                    totalCoupons: String(data.summary.totalCoupons || '0.00'),
                    netSales: String(data.summary.netSales || '0.00'),
                    totalOrders: parseInt(data.summary.totalOrders, 10) || 0,
                    totalReturns: parseInt(data.summary.totalReturns, 10) || 0
                } : { 
                    grossSales: '0.00', 
                    totalDiscount: '0.00', 
                    totalCoupons: '0.00', 
                    netSales: '0.00', 
                    totalOrders: 0, 
                    totalReturns: 0
                };
                totalPages = Math.max(1, Number.isInteger(data.totalPages) ? data.totalPages : 1);
                currentPage = Math.max(1, Number.isInteger(data.currentPage) ? data.currentPage : 1);

                searchCache.set(cacheKey, { orders: currentOrders, summary: currentSummary, totalPages, currentPage });
                if (searchCache.size > 10) searchCache.delete(searchCache.keys().next().value);

                console.log("Fetched Data:", { orders: currentOrders, summary: currentSummary, totalPages, currentPage });

                renderTable();
                renderSummary();
                renderPagination();
            } catch (error) {
                console.error("Error filtering sales:", error);
                showError(`Failed to load data: ${error.message}. <button onclick="filterSales()">Retry</button>`);
                currentOrders = [];
                totalPages = 1;
                currentPage = 1;
                renderTable();
                renderPagination();
            } finally {
                isFetching = false;
                toggleInputs(false);
            }
        }

        function renderTable() {
            const tbody = document.getElementById("orderTableBody");
            tbody.innerHTML = "";

            if (!Array.isArray(currentOrders) || currentOrders.length === 0) {
                tbody.innerHTML = `<tr><td colspan="9" style="text-align: center;">No orders found</td></tr>`;
                return;
            }

            const uniqueOrders = [];
            const orderIds = new Set();
            currentOrders.forEach(order => {
                if (!orderIds.has(order._id)) {
                    orderIds.add(order._id);
                    uniqueOrders.push(order);
                }
            });

            uniqueOrders.forEach(order => {
                const row = document.createElement("tr");
                const status = order.orderedItems.some(item => item.status === "Returned")
                    ? "Partially Returned"
                    : order.orderedItems[0]?.status || "Delivered";
                row.innerHTML = `
                    <td class="order-id">${order.orderId || 'N/A'}</td>
                    <td>${order.shippingAddress?.name || 'N/A'}</td>
                    <td class="amount">₹${(order.totalPrice || 0).toFixed(2)}</td>
                    <td class="discount">₹${(order.discount || 0).toFixed(2)}</td>
                    <td class="coupon">₹${(order.couponApplied ? (order.discount || 0) : 0).toFixed(2)}</td>
                    <td class="final-amount">₹${(order.finalAmount || 0).toFixed(2)}</td>
                    <td><span class="payment-method method-${(order.paymentMethod || '').toLowerCase().replace(/\s/g, '') || 'na'}">${order.paymentMethod || 'N/A'}</span></td>
                    <td>${order.createdAt ? new Date(order.createdAt).toLocaleDateString("en-GB", { day: "2-digit", month: "short", year: "numeric" }) : 'N/A'}</td>
                    <td><span class="status-badge status-${status.toLowerCase().replace(/\s/g, '')}">${status}</span></td>
                `;
                tbody.appendChild(row);
            });
        }

        function renderSummary() {
            const summaryGrid = document.querySelector(".summary-grid");
            summaryGrid.innerHTML = `
                <div class="summary-item">
                    <div class="summary-label">Gross Sales</div>
                    <div class="summary-value">₹${currentSummary.grossSales || '0.00'}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Coupons Redeemed</div>
                    <div class="summary-value">₹${currentSummary.totalCoupons || '0.00'}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Discounts</div>
                    <div class="summary-value">₹${currentSummary.totalDiscount || '0.00'}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Net Sales</div>
                    <div class="summary-value">₹${currentSummary.netSales || '0.00'}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Total Orders</div>
                    <div class="summary-value">${currentSummary.totalOrders || 0}</div>
                </div>
                <div class="summary-item">
                    <div class="summary-label">Total Returns</div>
                    <div class="summary-value">${currentSummary.totalReturns || 0}</div>
                </div>
            `;
        }

        function renderPagination() {
            const pagination = document.getElementById("pagination");
            pagination.innerHTML = `<button disabled>Page ${currentPage} of ${totalPages}</button>`;

            if (totalPages > 1) {
                pagination.innerHTML += `<button ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">←</button>`;

                const maxButtons = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));
                let endPage = Math.min(totalPages, startPage + maxButtons - 1);
                if (endPage - startPage + 1 < maxButtons) {
                    startPage = Math.max(1, endPage - maxButtons + 1);
                }

                if (startPage > 1) {
                    pagination.innerHTML += `<button onclick="changePage(1)">1</button>`;
                    if (startPage > 2) {
                        pagination.innerHTML += `<button disabled>...</button>`;
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    pagination.innerHTML += `<button ${i === currentPage ? 'class="active" disabled' : ''} onclick="changePage(${i})">${i}</button>`;
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        pagination.innerHTML += `<button disabled>...</button>`;
                    }
                    pagination.innerHTML += `<button onclick="changePage(${totalPages})">${totalPages}</button>`;
                }

                pagination.innerHTML += `<button ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">→</button>`;
            }
        }

        async function exportPDF() {
            if (isFetching) return;
            isFetching = true;
            toggleInputs(true);

            const filterParams = {
                search: document.getElementById("searchInput").value.trim().replace(/[<>]/g, ''),
                userSearch: document.getElementById("userSearchInput").value.trim().replace(/[<>]/g, ''),
                paymentMethod: document.getElementById("paymentMethodSelect").value,
                orderStatus: document.getElementById("orderStatusSelect").value,
                dateRange: document.getElementById("dateRangeSelect").value,
                startDate: document.getElementById("startDate").value.trim(),
                endDate: document.getElementById("endDate").value.trim()
            };

            try {
                const response = await fetch("/admin/export-sales-report-pdf", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(filterParams)
                });

                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "sales_report_delivered.pdf";
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error("Error exporting PDF:", error);
                showError(`Failed to export PDF: ${error.message}`);
            } finally {
                isFetching = false;
                toggleInputs(false);
            }
        }

        async function exportExcel() {
            if (isFetching) return;
            isFetching = true;
            toggleInputs(true);

            const filterParams = {
                search: document.getElementById("searchInput").value.trim().replace(/[<>]/g, ''),
                userSearch: document.getElementById("userSearchInput").value.trim().replace(/[<>]/g, ''),
                paymentMethod: document.getElementById("paymentMethodSelect").value,
                orderStatus: document.getElementById("orderStatusSelect").value,
                dateRange: document.getElementById("dateRangeSelect").value,
                startDate: document.getElementById("startDate").value.trim(),
                endDate: document.getElementById("endDate").value.trim()
            };

            try {
                const response = await fetch("/admin/export-sales-report-excel", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(filterParams)
                });

                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.href = url;
                a.download = "sales_report_delivered.xlsx";
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error("Error exporting Excel:", error);
                showError(`Failed to export Excel: ${error.message}`);
            } finally {
                isFetching = false;
                toggleInputs(false);
            }
        }

        function clearFilters() {
            document.getElementById("searchInput").value = "";
            document.getElementById("userSearchInput").value = "";
            document.getElementById("paymentMethodSelect").value = "";
            document.getElementById("orderStatusSelect").value = "";
            document.getElementById("dateRangeSelect").value = "";
            document.getElementById("startDate").value = "";
            document.getElementById("endDate").value = "";
            document.getElementById("customDateRange").style.display = "none";
            currentPage = 1;
            searchCache.clear();
            filterSales();
        }

        function showError(message) {
            const tbody = document.getElementById("orderTableBody");
            tbody.innerHTML = `<tr><td colspan="9" style="text-align: center; color: #e74c3c;">${message}</td></tr>`;
        }

        function toggleSidebar() {
            const sidebar = document.getElementById("sidebar-container");
            sidebar.style.display = sidebar.style.display === "none" || !sidebar.style.display ? "block" : "none";
        }
    </script>
</body>
</html>