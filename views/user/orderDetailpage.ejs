<%- include("../../views/partials/user/header") %>
<title>Order Details - #<%= order.orderId || 'Unknown' %></title>
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<style>
:root {
    --primary-color: #2c3e50;
    --secondary-color: #34495e;
    --accent-color: #ff0000;
    --success-color: #2ecc71;
    --warning-color: #f39c12;
    --danger-color: #e74c3c;
    --inactive-color: #95a5a6;
    --light-bg: #f8f9fa;
    --border-color: #e9ecef;
    --text-muted: #6c757d;
    --shadow-light: 0 2px 10px rgba(0,0,0,0.05);
    --shadow-medium: 0 4px 20px rgba(0,0,0,0.08);
    --shadow-heavy: 0 8px 32px rgba(0,0,0,0.12);
    --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --gradient-danger: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    --gradient-success: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
    --gradient-warning: linear-gradient(135deg, #f39c12 0%, #f1c40f 100%);
}

* {
    box-sizing: border-box;
}

body {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    color: var(--primary-color);
    margin: 0;
    padding: 0;
    min-height: 100vh;
}

/* Status Timeline */
.status-section {
    background: white;
    border-radius: 20px;
    padding: 40px;
    margin-bottom: 30px;
    box-shadow: var(--shadow-medium);
    border: 1px solid rgba(0,0,0,0.05);
}

.status-section.cancelled {
    background: #fff5f5;
    border: 2px solid var(--danger-color);
    opacity: 0.8;
}

.status-section.payment-failed {
    background: #fff8e1;
    border: 2px solid var(--warning-color);
}

.status-timeline {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    position: relative;
    margin-bottom: 30px;
}

.status-timeline::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 40px;
    right: 40px;
    height: 4px;
    background: var(--inactive-color);
    border-radius: 2px;
    z-index: 1;
}

.status-timeline::after {
    content: '';
    position: absolute;
    top: 20px;
    left: 40px;
    height: 4px;
    background: var(--success-color);
    border-radius: 2px;
    z-index: 2;
    width: 0%;
    transition: width 0.8s ease;
}

.status-timeline.pending::after { width: 25%; }
.status-timeline.processing::after { width: 50%; }
.status-timeline.shipped::after { width: 75%; }
.status-timeline.delivered::after { width: 100%; }
.status-timeline.return-request::after { width: 100%; }
.status-timeline.returned::after { width: 100%; }
.status-timeline.cancelled::after {
    background: var(--danger-color);
    width: 0%;
}
.status-timeline.payment-failed::after {
    background: var(--warning-color);
    width: 0%;
}

.status-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 3;
    flex: 1;
}

.status-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--inactive-color);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 15px;
    color: white;
    font-size: 16px;
    border: 4px solid white;
    box-shadow: var(--shadow-light);
    transition: all 0.3s ease;
}

.status-icon.active {
    background: var(--success-color);
    color: white;
    transform: scale(1.1);
}

.status-icon.current {
    background: var(--accent-color);
    color: white;
    animation: pulse 2s infinite;
    transform: scale(1.1);
}

.status-icon.cancelled {
    background: var(--danger-color);
    color: white;
    animation: none;
}

.status-icon.payment-failed {
    background: var(--warning-color);
    color: white;
    animation: none;
}

.status-timeline.cancelled .status-icon,
.status-timeline.payment-failed .status-icon {
    background: var(--danger-color);
    animation: none;
}

@keyframes pulse {
    0% { transform: scale(1.1); box-shadow: 0 0 0 0 rgba(231, 76, 60, 0.7); }
    70% { transform: scale(1.15); box-shadow: 0 0 0 10px rgba(231, 76, 60, 0); }
    100% { transform: scale(1.1); box-shadow: 0 0 0 0 rgba(231, 76, 60, 0); }
}

.status-label {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--primary-color);
    text-align: center;
    margin-bottom: 5px;
}

.status-date {
    font-size: 0.8rem;
    color: var(--text-muted);
    text-align: center;
}

.status-badge {
    display: inline-flex;
    align-items: center;
    background: var(--primary-color);
    color: white;
    padding: 6px 16px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.status-badge.disabled {
    background: var(--inactive-color);
    color: white;
    opacity: 0.7;
    cursor: default;
    animation: none;
}

.status-badge i {
    font-size: 0.9rem;
    margin-right: 6px;
}

.status-badge.status-cancelled i,
.status-badge.status-payment-failed i {
    content: '\f00d';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}

.status-badge.status-delivered i {
    content: '\f00c';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}

.status-badge.status-processing i {
    content: '\f013';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}

.status-badge.status-shipped i {
    content: '\f0d1';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}

.status-timeline.cancelled .status-icon i,
.status-timeline.payment-failed .status-icon i {
    content: '\f00d';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}

.status-timeline.delivered .status-icon i {
    content: '\f00c';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}

.status-icon.current i.fa-cog.fa-spin {
    animation: fa-spin 2s infinite linear;
}

.status-icon:not(.active):not(.current) {
    background: var(--inactive-color);
}

.status-icon:not(.active):not(.current) i {
    content: '\f00d';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
}

.user-account-page {
    overflow-x: hidden;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background: #f8f9fa;
}

.user-account-page .page-container {
    flex: 1;
    display: flex;
    min-height: 100vh;
    padding: 35px 20px;
    gap: 20px;
}

.user-account-page .sidebar {
    width: 352px;
    min-height: calc(100vh - 70px);
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border-radius: 10px;
}

.user-account-page .sidebar-header {
    padding: 25px 20px;
    border-bottom: 1px solid #e9ecef;
    background: linear-gradient(135deg, #C4A676, #8B7355);
    color: white;
    border-radius: 10px 10px 0 0;
}

.user-account-page .sidebar-header h5 {
    margin: 0 0 12px 0;
    font-weight: 700;
    font-size: 22px;
    letter-spacing: 0.5px;
}

.user-account-page .sidebar-header p {
    margin: 0;
    opacity: 0.9;
    font-size: 16px;
    font-weight: 300;
}

.user-account-page .sidebar-menu {
    padding: 25px 0;
}

.user-account-page .sidebar-menu .nav-link {
    display: flex;
    align-items: center;
    padding: 16px 20px;
    color: #495057;
    text-decoration: none;
    transition: all 0.3s ease;
    border-left: 4px solid transparent;
    font-size: 17px;
    font-weight: 500;
    margin-bottom: 8px;
}

.user-account-page .sidebar-menu .nav-link:hover {
    background: linear-gradient(90deg, #f8f9fa, #fff);
    color: #C4A676;
    border-left-color: #C4A676;
    transform: translateX(3px);
}

.user-account-page .sidebar-menu .nav-link.active {
    background: linear-gradient(90deg, #f8f9fa, #fff);
    color: #C4A676;
    border-left-color: #C4A676;
    font-weight: 600;
    box-shadow: inset 0 2px 4px rgba(196, 166, 118, 0.1);
}

.user-account-page .sidebar-menu .nav-link i {
    margin-right: 12px;
    width: 20px;
    text-align: center;
    font-size: 16px;
}

.main-content {
    flex: 1;
    padding-bottom: 50px;
    min-height: calc(100vh - 70px);
}

@media (max-width: 1200px) {
    .user-account-page .sidebar {
        width: 280px;
    }
}

@media (max-width: 992px) {
    .user-account-page .page-container {
        flex-direction: column;
        padding: 15px;
    }
    .user-account-page .sidebar {
        width: 100%;
        margin-bottom: 20px;
    }
}

.order-header {
    background: linear-gradient(135deg, #C4A676, #8B7355);
    border-radius: 20px;
    padding: 35px 40px;
    margin-bottom: 30px;
    box-shadow: var(--shadow-heavy);
    position: relative;
    overflow: hidden;
}



.order-header.cancelled {
    background: var(--gradient-danger);
    opacity: 0.8;
}

.order-header::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
    pointer-events: none;
}

.order-header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    z-index: 2;
}

.order-title-section h1 {
    color: white;
    font-size: 2.2rem;
    font-weight: 700;
    margin: 0 0 10px 0;
    text-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.order-date {
    color: rgba(255,255,255,0.9);
    font-size: 1rem;
    font-weight: 500;
}

.order-actions {
    display: flex;
    gap: 15px;
    align-items: center;
}

.cancel-btn-main {
    background: rgba(255,255,255,0.15);
    border: 2px solid rgba(255,255,255,0.3);
    color: white;
    padding: 12px 24px;
    border-radius: 12px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    display: flex;
    align-items: center;
    gap: 8px;
}

.cancel-btn-main:hover {
    background: rgba(255,255,255,0.25);
    border-color: rgba(255,255,255,0.5);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

.cancel-btn-main:disabled {
    background: var(--inactive-color);
    border: none;
    color: white;
    cursor: not-allowed;
    opacity: 0.7;
    pointer-events: none;
}

.retry-payment-btn {
    background:red;
    border: none;
    color: rgb(200, 195, 195);
    padding: 12px 24px;
    border-radius: 12px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    display: flex;
    align-items: center;
    gap: 8px;
}

.retry-payment-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(46, 204, 113, 0.4);
}

.retry-payment-btn:disabled {
    background: var(--inactive-color);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
    opacity: 0.7;
}

.invoice-btn {
    background: rgba(255,255,255,0.15);
    border: 2px solid rgba(255,255,255,0.3);
    color: white;
    padding: 12px 24px;
    border-radius: 12px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    display: flex;
    align-items: center;
    gap: 8px;
}

.invoice-btn:hover {
    background: rgba(255,255,255,0.25);
    border-color: rgba(255,255,255,0.5);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

.info-card {
    background: white;
    border-radius: 16px;
    padding: 30px;
    margin-bottom: 25px;
    box-shadow: var(--shadow-medium);
    border: 1px solid rgba(0,0,0,0.05);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.info-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-heavy);
}

.info-card.payment-failed {
    border: 2px solid var(--warning-color);
    background: #fff8e1;
}

.info-card.cancelled {
    border: 2px solid var(--danger-color);
    background: #fff5f5;
    opacity: 0.8;
}

.info-card h6 {
    color: var(--primary-color);
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 25px;
    display: flex;
    align-items: center;
    padding-bottom: 15px;
    border-bottom: 2px solid #f8f9fa;
}

.info-card h6 i {
    margin-right: 12px;
    color: var(--accent-color);
    font-size: 1.1rem;
}

.product-item {
    display: flex;
    align-items: center;
    padding: 25px 0;
    border-bottom: 1px solid #f8f9fa;
    position: relative;
    transition: all 0.3s ease;
}

.product-item:hover {
    background: #f8f9fa;
    margin: 0 -30px;
    padding: 25px 30px;
    border-radius: 12px;
}

.product-item:last-child {
    border-bottom: none;
}

.product-item.cancelled, .product-item.payment-failed {
    opacity: 0.7;
    background: #fff5f5;
    border: 1px solid var(--danger-color);
    border-radius: 8px;
}

.product-image {
    width: 90px;
    height: 90px;
    object-fit: cover;
    border-radius: 12px;
    margin-right: 25px;
    border: 2px solid #f8f9fa;
    box-shadow: var(--shadow-light);
}

.product-details {
    flex: 1;
    position: relative;
}

.product-name {
    font-weight: 700;
    margin-bottom: 10px;
    font-size: 1.1rem;
    color: var(--primary-color);
}

.product-meta {
    color: var(--text-muted);
    font-size: 0.9rem;
    margin-bottom: 12px;
    display: flex;
    gap: 20px;
}

.product-status {
    display: inline-flex;
    align-items: center;
    background: var(--primary-color);
    color: white;
    padding: 6px 16px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 10px;
}

.product-status.payment-failed {
    background: var(--warning-color);
}

.product-status.cancelled {
    background: var(--danger-color);
}

.product-actions {
    display: flex;
    align-items: center;
    gap: 15px;
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
}

.price-tag {
    font-weight: 700;
    font-size: 1.2rem;
}

.cancel-btn-product {
    background: var(--gradient-danger);
    border: none;
    color: white;
    padding: 8px 16px;
    border-radius: 8px;
    font-size: 0.85rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 6px;
}

.cancel-btn-product:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
}

.cancel-btn-product.cancelled {
    background: none;
    color: var(--danger-color);
    border: none;
    cursor: default;
    pointer-events: none;
    font-weight: 700;
    text-transform: uppercase;
}

.cancel-btn-product:disabled {
    background: var(--inactive-color);
    border: none;
    color: white;
    cursor: not-allowed;
    opacity: 0.7;
    pointer-events: none;
}

.return-btn {
    background: var(--gradient-danger);
    border: none;
    color: white;
    padding: 15px 30px;
    border-radius: 12px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 25px;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

.return-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
}

.return-btn:disabled {
    background: var(--inactive-color);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.address-info p {
    margin-bottom: 10px;
    color: var(--text-muted);
    font-size: 0.95rem;
    line-height: 1.5;
}

.address-info p:first-of-type {
    color: var(--primary-color);
    font-weight: 600;
    font-size: 1.1rem;
}

.summary-section {
    background: linear-gradient(135deg, #f8fff8 0%, #ffffff 100%);
    border: 2px solid #e8f5e8;
    border-radius: 16px;
    padding: 25px;
}

.summary-section h6 {
    color: var(--primary-color);
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 20px;
    border-bottom: none;
    padding-bottom: 0;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    font-size: 0.95rem;
    border-bottom: 1px solid rgba(0,0,0,0.05);
}

.summary-row:last-child {
    border-bottom: none;
}

.summary-row.total {
    font-weight: 700;
    font-size: 1.2rem;
    border-top: 2px solid var(--border-color);
    padding-top: 20px;
    margin-top: 15px;
    color: var(--primary-color);
    background: rgba(255, 0, 0, 0.05);
    margin: 15px -25px 0;
    padding: 20px 25px;
    border-radius: 0 0 16px 16px;
}

.summary-row .discount {
    color: var(--success-color);
    font-weight: 600;
}

.return-policy {
    background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);
    border: 2px solid #e3e8ff;
    border-radius: 16px;
    padding: 25px;
    position: relative;
    overflow: hidden;
}

.return-policy::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: var(--accent-color);
}

.return-policy h6 {
    color: var(--primary-color);
    font-size: 1.1rem;
    margin-bottom: 15px;
    border-bottom: none;
    padding-bottom: 0;
}

.return-policy p {
    color: var(--text-muted);
    font-size: 0.9rem;
    margin: 0;
    line-height: 1.6;
}

.modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    z-index: 2000;
    backdrop-filter: blur(8px);
}

.modal-overlay.show {
    display: flex;
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.3s ease;
}

.modal-content {
    background: white;
    border-radius: 20px;
    padding: 35px;
    width: 90%;
    max-width: 550px;
    max-height: 85vh;
    overflow-y: auto;
    box-shadow: 0 25px 80px rgba(0, 0, 0, 0.3);
    animation: slideUp 0.4s ease;
    border: 1px solid rgba(0,0,0,0.1);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 2px solid #f8f9fa;
}

.modal-title {
    font-size: 1.4rem;
    font-weight: 700;
    color: var(--primary-color);
}

.close-btn {
    background: #f8f9fa;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 8px;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.close-btn:hover {
    background: var(--accent-color);
    color: white;
    transform: rotate(90deg);
}

.form-group {
    margin-bottom: 25px;
}

.form-label {
    display: block;
    margin-bottom: 10px;
    font-weight: 600;
    color: var(--primary-color);
    font-size: 0.95rem;
}

.form-select, .form-textarea {
    width: 100%;
    padding: 15px 18px;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    font-family: inherit;
    background: #f8f9fa;
}

.form-select:focus, .form-textarea:focus {
    outline: none;
    border-color: var(--accent-color);
    box-shadow: 0 0 0 4px rgba(255, 0, 0, 0.1);
    background: white;
}

.form-textarea {
    resize: vertical;
    min-height: 120px;
}

.modal-actions {
    display: flex;
    gap: 15px;
    margin-top: 30px;
}

.btn-submit {
    flex: 1;
    background: var(--gradient-danger);
    color: white;
    border: none;
    padding: 15px 25px;
    border-radius: 12px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-submit:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 0, 0, 0.3);
}

.btn-cancel {
    flex: 1;
    background: transparent;
    color: var(--text-muted);
    border: 2px solid #e9ecef;
    padding: 15px 25px;
    border-radius: 12px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-cancel:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
    background: #f8f9fa;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideUp {
    from {
        transform: translateY(50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.swal2-container {
    z-index: 3000 !important;
}
</style>
</head>
<body class="user-account-page">
    <div class="page-container">
        <%- include("../../views/user/partials/sidebar") %>
        <div class="main-content">
            <% 
            let orderStatus = (order.paymentStatus === 'Failed' && !order.isCancelled) ? 'Payment Failed' : 'Pending';

            if (!(order.paymentStatus === 'Failed' && !order.isCancelled) && order.orderedItems && order.orderedItems.length > 0) {
              const statuses = order.orderedItems.map(item => item.status);

              const allCancelled = statuses.every(status => status === 'Cancelled');
              const allDelivered = statuses.every(status => status === 'Delivered');
              const anyReturnRequested = statuses.includes('Return Request');
              const anyPaymentFailed  = statuses.includes('Payment Failed');
              const anyReturnRejected = statuses.includes('Return Rejected');
              const anyReturned = statuses.includes('Returned');
              const anyShipped = statuses.includes('Shipped');
              const anyProcessing = statuses.includes('Processing');
              const anyPending = statuses.includes('Pending');

              if (order.isCancelled || allCancelled) {
                orderStatus = 'Cancelled';
              } else if (allDelivered) {
                orderStatus = 'Delivered';
              } else if (anyReturnRequested) {
                orderStatus = 'Return Request';
              } else if (anyReturnRejected) {
                orderStatus = 'Return Rejected';
              } else if (anyReturned) {
                orderStatus = 'Returned';
              } else if (anyShipped) {
                orderStatus = 'Shipped';
              } else if (anyProcessing) {
                orderStatus = 'Processing';
              } else if (anyPending) {
                orderStatus = 'Pending';
              } else if (anyPaymentFailed){
                orderStatus = 'Payment Failed'
              } else {
                orderStatus = 'Processing';
              }
            }
            %>
<% 
  const isPaymentFailed = order.paymentStatus === 'failed' || 
                          order.orderedItems.some(item => item.status === 'Payment Failed');
%>

<div class="order-header <%= orderStatus === 'Payment Failed' ? 'payment-failed' : orderStatus === 'Cancelled' ? 'cancelled' : '' %>">
  <div class="order-header-content">
    <div class="order-title-section">
      <h1>Order #<%= order.orderId || 'Unknown' %></h1>
      <div class="order-date">
        <i class="fas fa-calendar-alt"></i>
        Placed on <%= order?.createdAt ? new Date(order.createdAt).toLocaleDateString("en-IN", { year: "numeric", month: "long", day: "numeric" }) : 'N/A' %>
      </div>
    </div>

    <div class="order-actions">
      <% if (isPaymentFailed) { %>
        
        <button class="retry-payment-btn" onclick="openRetryPaymentModal('<%= order._id %>')">
          <i class="fas fa-redo"></i> Retry Payment
        </button>
      <% } else if (['Pending', 'Processing'].includes(orderStatus) && !order.isCancelled) { %>
      
        <button class="cancel-btn-main"
                data-order-id="<%= order._id %>"
                onclick="openCancelModal('order', '<%= order._id %>')">
          <i class="fas fa-times"></i> Cancel Order
        </button>
      <% } %>

      <% if (orderStatus === 'Delivered') { %>
        <button class="invoice-btn" onclick="downloadInvoice('<%= order._id %>')">
          <i class="fas fa-download"></i> Download Invoice
        </button>
      <% } %>
    </div>
  </div>
</div>


            <div class="status-section <%= orderStatus === 'Payment Failed' ? 'payment-failed' : orderStatus === 'Cancelled' ? 'cancelled' : '' %>">
                <div class="status-timeline <%= orderStatus.toLowerCase().replace(' ', '-') %>">
                    <!-- Order Placed -->
                    <div class="status-step">
                        <div class="status-icon <%= orderStatus === 'Payment Failed' || orderStatus === 'Cancelled' ? 'cancelled' : ['Pending', 'Processing', 'Shipped', 'Delivered', 'Return Request', 'Returned', 'Return Rejected'].includes(orderStatus) ? 'active' : '' %>">
                            <i class="fas fa-<%= orderStatus === 'Payment Failed' || orderStatus === 'Cancelled' ? 'times' : 'check' %>"></i>
                        </div>
                        <div class="status-details">
                            <div class="status-label">Order Placed</div>
                            <div class="status-date">
                                <%= orderStatus === 'Payment Failed' ? 'Payment Failed' : orderStatus === 'Cancelled' ? 'Order Cancelled' : 'Confirmed' %>
                                <% if (orderStatus === 'Cancelled' && order.cancelReason) { %>
                                    (<%= order.cancelReason %>)
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <!-- Processing -->
                    <div class="status-step">
                        <div class="status-icon <%= orderStatus === 'Processing' ? 'current' : ['Shipped', 'Delivered', 'Return Request', 'Returned', 'Return Rejected'].includes(orderStatus) ? 'active' : orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'cancelled' : '' %>">
                            <i class="fas fa-<%= orderStatus === 'Processing' ? 'cog fa-spin' : orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'times' : 'check' %>"></i>
                        </div>
                        <div class="status-details">
                            <div class="status-label">Processing</div>
                            <div class="status-date">
                                <%= orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'Not Started' : ['Processing', 'Shipped', 'Delivered', 'Return Request', 'Returned', 'Return Rejected'].includes(orderStatus) ? 'In Progress' : 'Pending' %>
                            </div>
                        </div>
                    </div>
                    <!-- Shipped -->
                    <div class="status-step">
                        <div class="status-icon <%= orderStatus === 'Shipped' ? 'current' : ['Delivered', 'Return Request', 'Returned', 'Return Rejected'].includes(orderStatus) ? 'active' : orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'cancelled' : '' %>">
                            <i class="fas fa-<%= orderStatus === 'Shipped' ? 'truck' : orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'times' : 'check' %>"></i>
                        </div>
                        <div class="status-details">
                            <div class="status-label">Shipped</div>
                            <div class="status-date">
                                <%= orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'Not Shipped' : ['Shipped', 'Delivered', 'Return Request', 'Returned', 'Return Rejected'].includes(orderStatus) ? 'In Transit' : 'Pending' %>
                            </div>
                        </div>
                    </div>
                    <!-- Delivered -->
                    <div class="status-step">
                        <div class="status-icon <%= ['Delivered', 'Return Request', 'Returned', 'Return Rejected'].includes(orderStatus) ? 'active' : orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'cancelled' : '' %>">
                            <i class="fas fa-<%= orderStatus === 'Delivered' ? 'check-circle' : orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'times' : 'check' %>"></i>
                        </div>
                        <div class="status-details">
                            <div class="status-label">Delivered</div>
                            <div class="status-date">
                                <%= orderStatus === 'Delivered' ? 'Complete' : orderStatus === 'Cancelled' ? 'Cancelled' : orderStatus === 'Payment Failed' ? 'Not Delivered' : 'Pending' %>
                                <% if (orderStatus === 'Cancelled' && order.additionalNote) { %>
                                    (<%= order.additionalNote %>)
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Status Badge -->
                <div class="status-badge status-<%= orderStatus.toLowerCase().replace(' ', '-') %> <%= orderStatus === 'Cancelled' || orderStatus === 'Payment Failed' ? 'disabled' : '' %>">
                    <i class="fas fa-<%= orderStatus === 'Payment Failed' ? 'exclamation-circle' : orderStatus === 'Delivered' ? 'check-circle' : orderStatus === 'Shipped' ? 'truck' : orderStatus === 'Processing' ? 'cog' : orderStatus === 'Cancelled' ? 'times' : orderStatus === 'Return Request' ? 'undo' : orderStatus === 'Returned' ? 'undo-alt' : 'clock' %>"></i>
                    <%= orderStatus %>
                </div>
            </div>

            <!-- Delivery Address -->
            <div class="info-card <%= orderStatus === 'Payment Failed' ? 'payment-failed' : orderStatus === 'Cancelled' ? 'cancelled' : '' %>">
                <h6><i class="fas fa-map-marker-alt"></i> Delivery Address</h6>
                <div class="address-info">
                    <p><%= order.shippingAddress.name || 'Unknown' %></p>
                    <p><%= order.shippingAddress.fullAddress || 'No address provided' %></p>
                    <p><%= order.shippingAddress.city || '' %> <%= order.shippingAddress.state || '' %> <%= order.shippingAddress.pincode || '' %></p>
                    <p><%= order.shippingAddress.phone || 'No phone provided' %></p>
                    <p>Order Method: <%= order.paymentMethod || 'Unknown' %></p>
                    <% if (orderStatus === 'Payment Failed') { %>
                        <p class="text-danger fw-bold"><i class="fas fa-exclamation-circle"></i> Payment Failed: Please retry payment to proceed.</p>
                    <% } %>
                    <% if (orderStatus === 'Cancelled') { %>
                        <p class="text-danger fw-bold"><i class="fas fa-times"></i> Order Cancelled</p>
                    <% } %>
                </div>
            </div>

            <!-- Order Items -->
            <div class="info-card <%= orderStatus === 'Payment Failed' ? 'payment-failed' : orderStatus === 'Cancelled' ? 'cancelled' : '' %>">
                <h6><i class="fas fa-shopping-bag"></i> Order Items</h6>
                <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                    <% order.orderedItems.forEach(item => { %>
                        <div class="product-item <%= item.status === 'Cancelled' ? 'cancelled' : orderStatus === 'Payment Failed' ? 'payment-failed' : '' %>">
                            <img src="<%= item.product && item.product.productImage && item.product.productImage[0] || 'https://via.placeholder.com/200' %>" alt="<%= item.product && item.product.productName || 'Product' %>" class="product-image">
                            <div class="product-details">
                                <div class="product-name"><%= item.product && item.product.productName || 'Unknown Product' %></div>
                                <div class="product-meta">₹<%= item.finalPrice || '0.00' %> | Qty: <%= item.quantity || 1 %></div>
                                <div class="product-status <%= item.status === 'Cancelled' ? 'cancelled' : orderStatus === 'Payment Failed' ? 'payment-failed' : '' %>"><%= orderStatus === 'Payment Failed' ? 'Payment Failed' : item.status || 'Pending' %></div>
                                <div class="price-tag">₹<%= item.finalPrice || '0.00' %></div>
                                <div class="product-actions">
                                    <% if (['Pending', 'Processing'].includes(item.status) && !order.isCancelled && order.paymentStatus !== 'Failed') { %>
                                        <button class="cancel-btn-product <%= item.status === 'Cancelled' ? 'cancelled' : '' %>"
                                                data-order-id="<%= order._id %>"
                                                data-product-id="<%= item.product._id %>"
                                                onclick="openCancelModal('item', '<%= order._id %>', '<%= item.product._id %>')"
                                                <%= orderStatus === 'Cancelled' ? 'disabled' : '' %>>
                                            <%= item.status === 'Cancelled' ? 'Cancelled' : 'Cancel Item' %>
                                        </button>
                                    <% } else if (item.status === 'Delivered') { %>
                                        <button class="cancel-btn-product return-btn-product"
                                                data-order-id="<%= order._id %>"
                                                data-product-id="<%= item.product._id %>"
                                                onclick="openReturnModal('<%= order._id %>', '<%= item.product._id %>')"
                                                <%= orderStatus === 'Cancelled' ? 'disabled' : '' %>>
                                            <i class="fas fa-undo"></i> Return Item
                                        </button>
                                    <% } else if (item.status === 'Return Rejected') { %>
                                        <div class="alert alert-danger mt-2 p-2" style="font-size: 0.95rem;">
                                            <strong>Return Rejected:</strong> <%= item.returnRejectNote || 'No reason provided.' %>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p>No items found in this order.</p>
                <% } %>
            </div>

            <!-- Return Policy -->
            <div class="info-card <%= orderStatus === 'Payment Failed' ? 'payment-failed' : orderStatus === 'Cancelled' ? 'cancelled' : '' %>">
                <div class="return-policy">
                    <h6><i class="fas fa-undo"></i> Return Policy</h6>
                    <p>Products can only be returned within 7 days of delivery. Please ensure the item is in its original condition and packaging to be eligible for a return.</p>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="info-card <%= orderStatus === 'Payment Failed' ? 'payment-failed' : orderStatus === 'Cancelled' ? 'cancelled' : '' %>">
                <div class="summary-section">
                    <h6><i class="fas fa-receipt"></i> Order Summary</h6>
                    <div class="summary-row">
                        <span>Original Price</span>
                        <span>₹<%= order.totalOriginal ? order.totalOriginal.toFixed(2) : '0.00' %></span>
                    </div>
                    <div class="summary-row">
                        <span>Offer Discount</span>
                        <span class="discount">-₹<%= order.totalSavings ? order.totalSavings.toFixed(2) : '0.00' %></span>
                    </div>
                    <div class="summary-row">
                        <span>Shipping</span>
                        <span>₹0.00</span>
                    </div>
                    <div class="summary-row">
                        <span>Delivery Charge</span>
                        <span>₹0.00</span>
                    </div>
                    <div class="summary-row">
                        <span>
                            Coupon Discount 
                            <% if (order.couponCode) { %>
                                (<strong><%= order.couponCode %></strong>)
                            <% } %>
                        </span>
                        <span class="discount">-₹<%= order.discount ? order.discount.toFixed(2) : '0.00' %></span>
                    </div>
                    <div class="summary-row total">
                        <span>Grand Total</span>
                        <span>₹<%= order.grandTotal ? order.grandTotal.toFixed(2) : '0.00' %></span>
                    </div>
                    <% if (orderStatus === 'Payment Failed') { %>
                        <p class="text-danger fw-bold mt-3">
                            <i class="fas fa-exclamation-circle"></i> Payment Failed: Please retry payment to proceed.
                        </p>
                    <% } %>
                    <% if (orderStatus === 'Cancelled') { %>
                        <p class="text-danger fw-bold mt-3">
                            <i class="fas fa-times"></i> Order Cancelled
                        </p>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Retry Payment Modal -->
    <div class="modal-overlay" id="retryPaymentModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Retry Payment</h3>
                <button class="close-btn" onclick="closeRetryPaymentModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="form-group">
                <p>Would you like to retry the payment for Order #<%= order.orderId || 'Unknown' %>?</p>
                <p>Amount: ₹<%= order.finalAmount || '0.00' %></p>
                <p class="text-danger"><i class="fas fa-exclamation-circle"></i> Previous payment attempt failed. Please try again.</p>
            </div>
            <div class="modal-actions">
                <button type="button" class="btn-cancel" onclick="closeRetryPaymentModal()">Cancel</button>
                <button type="button" class="btn-submit" onclick="retryPayment('<%= order._id %>')">Retry Now</button>
            </div>
        </div>
    </div>

    <!-- Return Modal -->
    <div class="modal-overlay" id="returnModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Return Item</h3>
                <button class="close-btn" onclick="closeReturnModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="returnForm">
                <input type="hidden" id="returnOrderId" name="orderId">
                <input type="hidden" id="returnProductId" name="productId">
                <div class="form-group">
                    <label class="form-label">Return Reason *</label>
                    <select class="form-select" id="returnReason" name="reason">
                        <option value="">Select a reason</option>
                        <option value="defective">Defective/Damaged Product</option>
                        <option value="wrong-item">Wrong Item Received</option>
                        <option value="size-issue">Size/Fit Issue</option>
                        <option value="quality">Quality Not as Expected</option>
                        <option value="changed-mind">Changed My Mind</option>
                        <option value="late-delivery">Late Delivery</option>
                        <option value="other">Other</option>
                    </select>
                    <div class="invalid-feedback" id="returnReasonError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label">Additional Details</label>
                    <textarea class="form-textarea" id="returnDetails" name="details" placeholder="Please provide more details about the return reason (optional)"></textarea>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" onclick="closeReturnModal()">Cancel</button>
                    <button type="submit" class="btn-submit">Submit Return Request</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Cancel Modal -->
    <div class="modal-overlay" id="cancelModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Cancel <span id="cancelType">Order</span></h3>
                <button class="close-btn" onclick="closeCancelModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="cancelForm">
                <input type="hidden" id="cancelOrderId" name="orderId">
                <input type="hidden" id="cancelProductId" name="productId">
                <div class="form-group">
                    <label class="form-label">Cancellation Reason *</label>
                    <select class="form-select" id="cancelReason" name="reason">
                        <option value="">Select a reason</option>
                        <option value="changed-mind">Changed My Mind</option>
                        <option value="ordered-by-mistake">Ordered by Mistake</option>
                        <option value="found-better-price">Found Better Price Elsewhere</option>
                        <option value="delivery-too-late">Expected Delivery Too Late</option>
                        <option value="other">Other</option>
                    </select>
                    <div class="invalid-feedback" id="cancelReasonError"></div>
                </div>
                <div class="form-group">
                    <label class="form-label">Additional Details</label>
                    <textarea class="form-textarea" id="cancelDetails" name="details" placeholder="Please provide more details (optional)"></textarea>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" onclick="closeCancelModal()">Cancel</button>
                    <button type="submit" class="btn-submit">Submit Cancellation Request</button>
                </div>
            </form>
        </div>
    </div>



    <%- include("../../views/partials/user/footer") %>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>

        
        // Debug order data
        const order = <%- JSON.stringify(order || {}) %>;
     
        // Retry Payment Modal Functions
        function openRetryPaymentModal(orderId) {
            document.getElementById('retryPaymentModal').classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        function closeRetryPaymentModal() {
            document.getElementById('retryPaymentModal').classList.remove('show');
            document.body.style.overflow = 'auto';
        }
async function retryPayment(orderId) {
  try {
    const response = await fetch('/payment/retry-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ orderId, amount: order.finalAmount }) 
    });

    const result = await response.json();

    if (response.ok) {
      const options = {
        key: '<%= process.env.RAZORPAY_KEY_ID %>',
        amount: result.order.amount,
        currency: 'INR',
        name: 'Lapkart',
        description: `Retry Payment for Order #${order.orderId || 'Unknown'}`,
        order_id: result.order.id,
        handler: async function (response) {
          try {
            const verifyResponse = await fetch('/payment/verify', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                orderId, // MongoDB order ID
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature
              })
            });

            const verifyResult = await verifyResponse.json();

            if (verifyResponse.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Payment Successful',
                text: 'Your payment was successful. The order is now being processed.',
                confirmButtonColor: '#ff0000',
                confirmButtonText: 'OK'
              }).then(() => {
                window.location.href = `/order/${verifyResult.orderId}`;
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Payment Verification Failed',
                text: verifyResult.message || 'Failed to verify payment. Please contact support.',
                confirmButtonColor: '#ff0000',
                confirmButtonText: 'OK'
              });
            }
          } catch (error) {
            console.error('Error verifying payment:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An error occurred during payment verification. Please try again.',
              confirmButtonColor: '#ff0000',
              confirmButtonText: 'OK'
            });
          }
        },
        prefill: {
          name: order.shippingAddress.name || '',
          email: order.shippingAddress.email || '',
          contact: order.shippingAddress.phone || ''
        },
        theme: { color: '#1a73e8' }
      };

      const rzp = new Razorpay(options);
      rzp.on('payment.failed', function (response) {
        Swal.fire({
          icon: 'error',
          title: 'Payment Failed',
          text: 'The payment attempt failed. Please try again or contact support.',
          confirmButtonColor: '#ff0000',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.href = `/payment-failed?errorCode=${response.error.code}&productId=${order.orderedItems[0]?.product?._id || ''}&paymentId=${response.error.metadata?.payment_id || ''}&reason=${response.error.reason || 'Unknown'}`;
        });
      });
      rzp.open();
      closeRetryPaymentModal();
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: result.message || 'Failed to initiate payment retry. Please try again.',
        confirmButtonColor: '#ff0000',
        confirmButtonText: 'OK'
      });
    }
  } catch (error) {
    console.error('Error retrying payment:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An error occurred. Please try again later.',
      confirmButtonColor: '#ff0000',
      confirmButtonText: 'OK'
    });
  }
}
        // Return Modal Functions
        function openReturnModal(orderId, productId) {
            document.getElementById('returnModal').classList.add('show');
            document.body.style.overflow = 'hidden';
            document.getElementById('returnOrderId').value = orderId;
            document.getElementById('returnProductId').value = productId;
        }

        function closeReturnModal() {
            document.getElementById('returnModal').classList.remove('show');
            document.body.style.overflow = 'auto';
            document.getElementById('returnForm').reset();
            document.getElementById('returnReasonError').textContent = '';
        }

        document.getElementById('returnForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const orderId = document.getElementById('returnOrderId').value;
            const productId = document.getElementById('returnProductId').value;
            const reason = document.getElementById('returnReason').value;
            const note = document.getElementById('returnDetails').value;

            if (!reason) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please select a return reason.',
                    confirmButtonColor: '#ff0000',
                    confirmButtonText: 'OK'
                });
                document.getElementById('returnReasonError').textContent = 'Please select a return reason.';
                return;
            }

            try {
                const response = await fetch('/order-details/return', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        orderId,
                        productId,
                        reason,
                        note,
                        status: 'Return Request'
                    })
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Return request submitted successfully! You will receive a refund confirmation shortly.',
                        confirmButtonColor: '#ff0000',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        closeReturnModal();
                        const returnBtn = document.querySelector(`[data-product-id="${productId}"]`);
                        if (returnBtn) {
                            returnBtn.disabled = true;
                            returnBtn.innerHTML = '<i class="fas fa-check"></i> Return Requested';
                        }
                        const productItem = returnBtn.closest('.product-item');
                        if (productItem) {
                            productItem.querySelector('.product-status').textContent = 'Return Request';
                        }
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to submit return request. Please try again.',
                        confirmButtonColor: '#ff0000',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error submitting return:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again later.',
                    confirmButtonColor: '#ff0000',
                    confirmButtonText: 'OK'
                });
            }
        });

     function openCancelModal(type, orderId, productId = null) {
  document.getElementById('cancelModal').classList.add('show');
  document.body.style.overflow = 'hidden';
  document.getElementById('cancelType').textContent = type === 'order' ? 'Order' : 'Item';
  document.getElementById('cancelOrderId').value = orderId;
  document.getElementById('cancelProductId').value = productId || '';
}

function closeCancelModal() {
  document.getElementById('cancelModal').classList.remove('show');
  document.body.style.overflow = 'auto';
  document.getElementById('cancelForm').reset();
  document.getElementById('cancelReasonError').textContent = '';
}

document.getElementById('cancelForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  const orderId = document.getElementById('cancelOrderId').value;
  const productId = document.getElementById('cancelProductId').value;
  const reason = document.getElementById('cancelReason').value;
  const details = document.getElementById('cancelDetails').value;


  if (!reason) {
    Swal.fire({
      icon: 'error',
      title: 'Validation Error',
      text: 'Please select a cancellation reason.',
      confirmButtonColor: '#ff0000',
      confirmButtonText: 'OK'
    });
    document.getElementById('cancelReasonError').textContent = 'Please select a cancellation reason.';
    return;
  }

  const productIds = productId ? [productId] : [];

  try {
    const response = await fetch('/order-details/cancel', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        orderId,
        productIds,
        reason,
        details
      })
    });

    const result = await response.json();

    if (response.ok) {
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: result.message || `Cancellation request submitted successfully! ${productIds.length ? 'Item' : 'Order'} has been cancelled.`,
        confirmButtonColor: '#ff0000',
        confirmButtonText: 'OK'
      }).then(() => {
        closeCancelModal();
        if (productIds.length) {
          const cancelBtn = document.querySelector(`.cancel-btn-product[data-product-id="${productIds[0]}"]`);
          if (cancelBtn) {
            cancelBtn.classList.add('cancelled');
            cancelBtn.innerHTML = 'Cancelled';
            cancelBtn.disabled = true;
          }
          const productItem = cancelBtn.closest('.product-item');
          if (productItem) {
            productItem.classList.add('cancelled');
            productItem.querySelector('.product-status').textContent = 'Cancelled';
          }
        } else {
          const cancelBtn = document.querySelector('.cancel-btn-main');
          if (cancelBtn) {
            cancelBtn.classList.add('cancelled');
            cancelBtn.disabled = true;
            cancelBtn.style.display = 'none';
          }
          document.querySelectorAll('.product-item').forEach(item => {
            item.classList.add('cancelled');
            item.querySelector('.product-status').textContent = 'Cancelled';
            const itemCancelBtn = item.querySelector('.cancel-btn-product');
            if (itemCancelBtn) {
              itemCancelBtn.classList.add('cancelled');
              itemCancelBtn.innerHTML = 'Cancelled';
              itemCancelBtn.disabled = true;
            }
          });
          const statusTimeline = document.querySelector('.status-timeline');
          if (statusTimeline) statusTimeline.className = 'status-timeline cancelled';
          const statusBadge = document.querySelector('.status-badge');
          if (statusBadge) {
            statusBadge.className = 'status-badge status-cancelled';
            statusBadge.innerHTML = `<i class="fas fa-times"></i> Cancelled`;
          }
          document.querySelectorAll('.status-icon').forEach(icon => {
            icon.classList.add('cancelled');
            icon.classList.remove('active', 'current');
          });
        }
        window.location.reload();
      });
    } else {
      Swal.fire({
        icon: 'warning',
        title: 'Warning',
        text: result.message || 'Failed to submit cancellation request. Please try again.',
        confirmButtonColor: '#ff0000',
        confirmButtonText: 'OK'
      });
    }
  } catch (error) {
    console.error('Error submitting cancellation:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'An unexpected error occurred. Please try again later.',
      confirmButtonColor: '#ff0000',
      confirmButtonText: 'OK'
    });
  }
});
async function downloadInvoice(orderId) {
  try {
    if (!orderId) {
      throw new Error('Order ID is required');
    }

    showLoadingMessage('Generating Invoice...');

    // Try multiple token retrieval methods
    let token = localStorage.getItem('token') || 
                localStorage.getItem('authToken') ||
                sessionStorage.getItem('token') ||
                getCookie('token');

    const headers = {
      'Accept': 'application/pdf',
      'Content-Type': 'application/json',
    };

    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }

    const response = await fetch(`/order/invoice/${orderId}`, {
      method: 'GET',
      headers: headers,
      credentials: 'include',
    });

    hideLoadingMessage();

    if (!response.ok) {
      let errorMessage = 'Failed to download invoice';
      
      if (response.status === 401 || response.status === 403) {
        errorMessage = 'Session expired. Please login again.';
        showErrorMessage(errorMessage);
        setTimeout(() => {
          window.location.href = '/login';
        }, 2000);
        return;
      }

      try {
        const errorData = await response.json();
        errorMessage = errorData.message || errorMessage;
      } catch (e) {
        errorMessage = response.statusText || errorMessage;
      }
      
      throw new Error(errorMessage);
    }

    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/pdf')) {
      throw new Error('Invalid response format. Expected PDF file.');
    }

    const blob = await response.blob();
    
    if (blob.size === 0) {
      throw new Error('Received empty file');
    }

    // Create download
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Invoice_${orderId}.pdf`;
    a.style.display = 'none';
    
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
    
    showSuccessMessage('Invoice downloaded successfully!');

  } catch (error) {
    hideLoadingMessage();
    console.error('Error downloading invoice:', error.message);
    showErrorMessage(error.message || 'An error occurred while downloading the invoice.');
  }
}

// Alternative simple method
function downloadInvoiceSimple(orderId) {
  if (!orderId) {
    showErrorMessage('Order ID is required');
    return;
  }

  const form = document.createElement('form');
  form.method = 'GET';
  form.action = `/order/invoice/${orderId}`;
  form.target = '_blank';
  
  document.body.appendChild(form);
  form.submit();
  document.body.removeChild(form);
}

// Helper functions
function showLoadingMessage(message) {
  if (typeof Swal !== 'undefined') {
    Swal.fire({
      title: message,
      text: 'Please wait...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
  } else {

    const loadingDiv = document.createElement('div');
    loadingDiv.id = 'loading-indicator';
    loadingDiv.style.cssText = 'position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:#000;color:#fff;padding:20px;border-radius:5px;z-index:9999;';
    loadingDiv.textContent = message;
    document.body.appendChild(loadingDiv);
  }
}

function hideLoadingMessage() {
  if (typeof Swal !== 'undefined') {
    Swal.close();
  } else {
    const loadingDiv = document.getElementById('loading-indicator');
    if (loadingDiv) {
      document.body.removeChild(loadingDiv);
    }
  }
}

function showSuccessMessage(message) {
  if (typeof Swal !== 'undefined') {
    Swal.fire({
      icon: 'success',
      title: 'Success!',
      text: message,
      timer: 2000,
      showConfirmButton: false
    });
  } else {
    alert(message);
  }
}

function showErrorMessage(message) {
  if (typeof Swal !== 'undefined') {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: message,
      confirmButtonText: 'OK'
    });
  } else {
    alert(message);
  }
}

function getCookie(name) {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
  return null;
}
        // Close modals when clicking overlay
        document.getElementById('retryPaymentModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeRetryPaymentModal();
            }
        });

        document.getElementById('returnModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeReturnModal();
            }
        });

        document.getElementById('cancelModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCancelModal();
            }
        });

        // Initialize form validation for real-time feedback
        document.querySelectorAll('.form-select').forEach(select => {
            select.addEventListener('change', function() {
                const errorDiv = document.getElementById(`${this.id}Error`);
                if (this.value) {
                    errorDiv.textContent = '';
                } else {
                    errorDiv.textContent = `Please select a ${this.id.includes('cancel') ? 'cancellation' : 'return'} reason.`;
                    Swal.fire({
                        icon: 'warning',
                        title: 'Incomplete Field',
                        text: `Please select a ${this.id.includes('cancel') ? 'cancellation' : 'return'} reason.`,
                        confirmButtonColor: '#ff0000',
                        confirmButtonText: 'OK'
                    });
                }
            });
        });

        // Alert for payment failure on page load
        <% if (orderStatus === 'Payment Failed') { %>
            Swal.fire({
                icon: 'warning',
                title: 'Payment Failed',
                text: 'Your previous payment attempt failed. Please retry the payment to proceed with your order.',
                confirmButtonColor: '#ff0000',
                confirmButtonText: 'Retry Now',
                showCancelButton: true,
                cancelButtonText: 'Cancel',
                cancelButtonColor: '#6c757d'
            }).then((result) => {
                if (result.isConfirmed) {
                    openRetryPaymentModal('<%= order._id %>');
                }
            });
        <% } %>
    </script>
</body>
</html>