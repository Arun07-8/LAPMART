<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lapmart - Login</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/userside-css/userside-css/login.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        
        <div class="form-box">
            <div class="form-section">
                <h2>Welcome Back</h2>
                <form id="login-form" action="/login" method="post" novalidate>
                    <div class="input-group">
                        <label for="email" class="visually-hidden">Email</label>
                        <input type="email" placeholder="Enter your email" name="email" id="email" required aria-describedby="email-error">
                        <div class="error-message error1" id="email-error" aria-live="polite"></div>
                    </div>
                    
                    <div class="input-group password-group">
                        <label for="password" class="visually-hidden">Password</label>
                        <input type="password" placeholder="Enter your password" id="password" name="password" required aria-describedby="password-error">
                        <div class="error-message error2" id="password-error" aria-live="polite"></div>
                        <div class="password-strength" id="password-strength"></div>
                        <button type="button" class="toggle-password" aria-label="Toggle password visibility" onclick="togglePassword()">
                            <i class="fas fa-eye" id="toggleIcon"></i>
                        </button>
                    </div>
                    
                    <div class="forgot-password">
                        <a href="/forgot-password">Forgot Password?</a>
                    </div>
                    
                    <button type="submit" class="submit-btn" id="login-btn">
                        <span id="login-btn-text">Sign In</span>
                        <span id="login-spinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                    
                    <div class="divider">
                        <span>OR</span>
                    </div>
                    
                    <a href="/auth/google" class="google-btn">
                        <img class="google-icon" src="https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png" alt="Google icon">
                        Continue with Google
                    </a>
                    
                    <p class="signup-link">
                        Don't have an account? <a href="/signup">Sign Up</a>
                    </p>
                </form>
            </div>
            
            <div class="image-section">
                <div class="brand-logo">
                    LAPMART
                </div>
                <div class="brand-tagline">
                    Laptops & More
                </div>
               
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script>
        // Session message handling
        document.addEventListener("DOMContentLoaded", function () {
            if (typeof Swal === 'undefined') {
                console.error("SweetAlert2 not loaded");
                return;
            }

            const sessionData = document.getElementById('session-data');
            let sessionMessage = sessionData.dataset.message;
            if (sessionMessage !== 'null') {
                try {
                    sessionMessage = JSON.parse(sessionMessage);
                } catch (error) {
                    console.error("Failed to parse sessionMessage:", error);
                    sessionMessage = null;
                }

                if (sessionMessage) {
                    let text = typeof sessionMessage === 'string' ? sessionMessage : sessionMessage.text;
                    let icon = typeof sessionMessage === 'string' ? 'error' : (sessionMessage.type === 'success' ? 'success' : 'error');
                    let title = icon === 'success' ? 'Success' : 'Error';
                    if (text) {
                        Swal.fire({
                            icon: icon,
                            title: title,
                            text: text,
                            confirmButtonColor: '#3a7bd5'
                        });
                    }
                }
            }
        });

        // Password visibility toggle
        function togglePassword() {
            const passwordInput = document.getElementById('password');
            const toggleIcon = document.getElementById('toggleIcon');
            const isPassword = passwordInput.type === 'password';
            passwordInput.type = isPassword ? 'text' : 'password';
            toggleIcon.classList.toggle('fa-eye', isPassword);
            toggleIcon.classList.toggle('fa-eye-slash', !isPassword);
            passwordInput.focus();
        }

        // Form validation with debouncing
        document.addEventListener("DOMContentLoaded", function () {
            const email = document.getElementById("email");
            const password = document.getElementById("password");
            const error1 = document.querySelector(".error1");
            const error2 = document.querySelector(".error2");
            const passwordStrength = document.getElementById("password-strength");
            const loginForm = document.getElementById("login-form");
            const loginBtn = document.getElementById("login-btn");
            const loginBtnText = document.getElementById("login-btn-text");
            const loginSpinner = document.getElementById("login-spinner");

            function debounce(func, wait) {
                let timeout;
                return function (...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            function showError(errorElement, message) {
                errorElement.innerHTML = message;
                errorElement.classList.add('show');
            }

            function hideError(errorElement) {
                errorElement.classList.remove('show');
                errorElement.innerHTML = "";
            }

            function updatePasswordStrength(passwordVal) {
                const strongPass = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
                const mediumPass = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/;
                passwordStrength.classList.add('show');
                if (!passwordVal) {
                    passwordStrength.classList.remove('weak', 'medium', 'strong');
                    passwordStrength.innerHTML = "";
                    passwordStrength.classList.remove('show');
                } else if (strongPass.test(passwordVal)) {
                    passwordStrength.classList.remove('weak', 'medium');
                    passwordStrength.classList.add('strong');
                    passwordStrength.innerHTML = "Strong password";
                } else if (mediumPass.test(passwordVal)) {
                    passwordStrength.classList.remove('weak', 'strong');
                    passwordStrength.classList.add('medium');
                    passwordStrength.innerHTML = "Medium password";
                } else {
                    passwordStrength.classList.remove('medium', 'strong');
                    passwordStrength.classList.add('weak');
                    passwordStrength.innerHTML = "Weak password";
                }
            }

            function emailValidateChecking() {
                const emailVal = email.value.trim();
                const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                if (!emailVal) {
                    showError(error1, "Email cannot be empty");
                    email.setAttribute('aria-invalid', 'true');
                    return false;
                } else if (!emailPattern.test(emailVal)) {
                    showError(error1, "Invalid email format");
                    email.setAttribute('aria-invalid', 'true');
                    return false;
                } else {
                    hideError(error1);
                    email.setAttribute('aria-invalid', 'false');
                    return true;
                }
            }

            function passwordValidateChecking() {
                const passwordVal = password.value.trim();
                const strongPass = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
                let isValid = true;

                if (!passwordVal) {
                    showError(error2, "Password cannot be empty");
                    password.setAttribute('aria-invalid', 'true');
                    isValid = false;
                } else if (passwordVal.length < 8) {
                    showError(error2, "Password must be at least 8 characters");
                    password.setAttribute('aria-invalid', 'true');
                    isValid = false;
                } else if (!strongPass.test(passwordVal)) {
                    showError(error2, "Password must include at least one number and one special character (@$!%*?&)");
                    password.setAttribute('aria-invalid', 'true');
                    isValid = false;
                } else {
                    hideError(error2);
                    password.setAttribute('aria-invalid', 'false');
                }

                updatePasswordStrength(passwordVal);
                return isValid;
            }

            const debouncedEmailValidate = debounce(emailValidateChecking, 300);
            const debouncedPasswordValidate = debounce(passwordValidateChecking, 300);

            email.addEventListener("input", debouncedEmailValidate);
            password.addEventListener("input", debouncedPasswordValidate);

            loginForm.addEventListener("submit", function (e) {
                const isEmailValid = emailValidateChecking();
                const isPasswordValid = passwordValidateChecking();

                if (!isEmailValid || !isPasswordValid) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        html: [
                            !isEmailValid ? error1.innerHTML : '',
                            !isPasswordValid ? error2.innerHTML : ''
                        ].filter(Boolean).join('<br>'),
                        confirmButtonColor: '#3a7bd5'
                    });
                } else {
                    loginBtn.disabled = true;
                    loginBtnText.textContent = "Signing In...";
                    loginSpinner.classList.remove('d-none');
                }
            });

            // Carousel logic
            const carousel = document.getElementById('laptop-carousel');
            let currentIndex = 0;
            const images = carousel.querySelectorAll('img');
            const totalImages = images.length;

            function updateCarousel() {
                carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
            }

            setInterval(() => {
                currentIndex = (currentIndex + 1) % totalImages;
                updateCarousel();
            }, 3000);
        });
    </script>
</body>
</html>